{"version":3,"sources":["components/PackageItem/index.js","components/PayPalButton/index.js","containers/checkout-success/index.js","containers/checkout-form/CheckoutFormHooks.js","containers/list-package/mock.data.js","configs/Api.js","containers/list-package/index.js","components/ProductItem/index.js","components/Common/Modal/index.js","containers/list-product/index.js","App.js","serviceWorker.js","index.js"],"names":["PackageItem","props","id","name","amount","onClickPlaceHolder","className","toLocaleString","style","currency","minimumFractionDigits","maximumFractionDigits","onClick","PayPal","window","paypal","Buttons","driver","React","ReactDOM","payPalStyle","integrateServer","height","layout","size","shape","color","label","PayPalButton","total","commit","client","env","locale","createPayment","executePayment","payment","data","actions","create","transactions","experience","input_fields","no_shipping","onCancel","console","log","onError","err","onAuthorize","paymentID","payerID","get","then","paymentDetails","execute","defaultProps","sandbox","process","CheckoutSuccess","CheckoutFormHooks","stripe","useStripe","elements","useElements","handleSubmit","event","a","preventDefault","createPaymentMethod","type","card","getElement","CardElement","error","paymentMethod","onSubmit","disabled","packages","api","baseURL","config","axios","ApiFactory","checkoutStripeProduct","post","ListPackage","handleClickPlaceHolder","packageProduct","payload","package","sessionId","redirectToCheckout","alert","message","PACKAGES","map","item","key","Wrapper","styled","div","imageUrl","ProductItem","product","price","url_image","sku","buyNow","Content","top","width","Modal","show","title","onClose","Fragment","position","left","bottom","right","children","ListProduct","useState","products","setProducts","showPopupByNow","setShowPopupBuyNow","useEffect","Error","fetchProduct","currentState","stripePromise","loadStripe","App","path","exact","component","Boolean","location","hostname","match","dotenv","render","document","getElementById","navigator","serviceWorker","ready","registration","unregister","catch"],"mappings":"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","file":"static/js/main.c8ef28a9.chunk.js","sourcesContent":["import React from \"react\";\nimport \"./style.scss\";\n\nconst PackageItem = (props) => {\n    const { id, name, amount, onClickPlaceHolder } = props;\n    return (\n        <div className=\"package-item\">\n            <div className=\"package-name\">{name}</div>\n            <div className=\"package-amount\">\n                {amount.toLocaleString(\"en-US\", {\n                    style: \"currency\",\n                    currency: \"USD\",\n                    minimumFractionDigits: 0,\n                    maximumFractionDigits: 0,\n                })}\n            </div>\n            <div className=\"place-holder\">\n                <button onClick={() => onClickPlaceHolder(id)}>Place holder</button>\n            </div>\n        </div>\n    );\n};\n\nexport default PackageItem;\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\n\nconst PayPal = window.paypal.Buttons.driver(\"react\", { React, ReactDOM });\nconst payPalStyle = (integrateServer) => ({\n  height: 38,\n  layout: \"horizontal\", // horizontal | vertical\n  size: \"responsive\", // small | medium | large | responsive\n  shape: \"rect\", // pill | rect\n  color: integrateServer ? \"gold\" : \"blue\", // gold | blue | silver | white | black\n  label: \"checkout\", // checkout | credit | pay | buynow | paypal | installment\n});\n\nconst PayPalButton = (props) => {\n  const {\n    currency,\n    total,\n    commit,\n    client,\n    env,\n    locale,\n    integrateServer,\n    createPayment,\n    executePayment,\n  } = props;\n\n  function payment(data, actions) {\n    // Set up the payment here, when the buyer clicks on the button\n    const callback = integrateServer ? createPayment : actions.payment.create;\n    const dataPayment = {\n      payment: {\n        transactions: [\n          {\n            amount: {\n              total: total || \"10.28\",\n              currency,\n            },\n          },\n        ],\n      },\n      experience: {\n        input_fields: {\n          no_shipping: 1, // không hiển thị địa chỉ nhận hàng ở trang thanh toán paypal\n        },\n      },\n      // redirect_urls: {\n      //   return_url: 'https://example.com',\n      //   cancel_url: 'https://example.com'\n      // }\n    };\n    return callback(dataPayment);//.then((res) => res.id);\n  }\n\n  function onAuthorize(data, actions) {\n    const { paymentID, payerID } = data;\n    console.log(\"paymentID, payerID\", paymentID, payerID)\n    if (integrateServer) {\n      return executePayment({ paymentID, payerID });\n    }\n    // Optional: display a confirmation page here\n    // Execute the payment here, when the buyer approves the transaction\n    // Get the payment details\n    return actions.payment.get().then((paymentDetails) => {\n      // Show a confirmation using the details from paymentDetails\n      // Then listen for a click on your confirm button\n      // Execute the payment\n      console.log(\"paymentDetails\", data, paymentDetails);\n      actions.payment.execute().then(function () {\n        console.log(\"execute()\", data, paymentDetails);\n        // Show a success page to the buyer\n      });\n    });\n  }\n\n  function onCancel(data, actions) {\n    console.log(\"onCancel\", data, actions);\n    // Show a cancel page or return to cart using actions.redirect(`url`)\n  }\n\n  function onError(err) {\n    console.log(\"onError\", err);\n    // Show an error page here, when an error occurs\n  }\n\n  return (\n    <PayPal\n      style={payPalStyle(integrateServer)}\n      locale={locale}\n      commit={commit}\n      client={client}\n      env={env}\n      payment={payment}\n      onCancel={onCancel}\n      onError={onError} // If an error prevents buyer checkout, define an error page\n      onAuthorize={onAuthorize}\n    />\n  );\n};\n\nexport default PayPalButton;\n\nPayPalButton.defaultProps = {\n  currency: \"USD\",\n  locale: \"en_US\",\n  commit: true, // Optional: show a 'Pay Now' button in the checkout flow\n  env: \"sandbox\", // Optional: specify 'production' environment\n  client: {\n    sandbox: process.env.REACT_APP_PAYPAL_CLIENT_ID,\n  },\n};\n","import React from \"react\";\n\nconst CheckoutSuccess = () => {\n  return <div>Payment success</div>;\n};\n\nexport default CheckoutSuccess;\n","import React from \"react\";\nimport { CardElement, useStripe, useElements } from \"@stripe/react-stripe-js\";\n\nimport './style.scss';\n\nconst CheckoutFormHooks = () => {\n    const stripe = useStripe();\n    const elements = useElements();\n\n    const handleSubmit = async (event) => {\n        event.preventDefault();\n        const { error, paymentMethod } = await stripe.createPaymentMethod({\n            type: \"card\",\n            card: elements.getElement(CardElement),\n        });\n\n        console.log(error, paymentMethod);\n    };\n\n    return (\n        <div id=\"payment-container\">\n            <form onSubmit={handleSubmit}>\n                <CardElement />\n                <button type=\"submit\" disabled={!stripe}>\n                    Pay\n                </button>\n            </form>\n        </div>\n    );\n};\n\nexport default CheckoutFormHooks;\n\n// tạo payment_method từ public_key thông qua stripe.createPaymentMethod();\n","export const packages = [\n    {\n        id: 1,\n        name: \"Basic\",\n        amount: 1,\n    },\n    {\n        id: 2,\n        name: \"Standard\",\n        amount: 22,\n    },\n    {\n        id: 3,\n        name: \"Premium\",\n        amount: 84,\n    },\n];\n","import axios from 'axios';\n\nconst ApiFactory = (baseURL = 'http://127.0.0.1:8400/api/v1', config = {}) =>\n  axios.create({ baseURL, ...config });\n\nconst api = ApiFactory();\n\n// Product\nconst fetchListProducts = () => api.get('/products');\n\n// Stripe\nconst checkoutStripeProduct = (data) => api.post('/stripe/checkout-product', data);\nconst checkoutStripe = (data) => api.post('/stripe/checkout', data);\n\n// PayPal\nconst createPayPalPayment = (data) => api.post('/paypal/create-payment', data);\nconst executePayPalPayment = (paymentId, data) =>\n  api.post(`/paypal/checkout-payment/${paymentId}`, data);\n\nexport {\n  fetchListProducts,\n  checkoutStripeProduct,\n  checkoutStripe,\n  createPayPalPayment,\n  executePayPalPayment,\n};\n","import React from \"react\";\nimport { useStripe } from \"@stripe/react-stripe-js\";\n\nimport { PackageItem } from \"components\";\nimport { packages as PACKAGES } from \"./mock.data\";\nimport { checkoutStripeProduct } from \"configs/Api\";\n\nimport \"./style.scss\";\n\nconst ListPackage = () => {\n    const stripe = useStripe();\n    async function handleClickPlaceHolder(packageProduct) {\n        try {\n            const payload = { package: packageProduct };\n            const { data } = await checkoutStripeProduct(payload);\n            const { id: sessionId } = data;\n            const { error } = await stripe.redirectToCheckout({ sessionId });\n            if (error) {\n                alert(error.message);\n            }\n        } catch (error) {\n            console.log(error);\n            alert(\"Please try again\");\n        }\n    }\n    return (\n        <div id=\"product-list\">\n            {PACKAGES.map((item) => (\n                <PackageItem key={item.id} {...item} onClickPlaceHolder={handleClickPlaceHolder} />\n            ))}\n        </div>\n    );\n};\n\nexport default ListPackage;\n","import React from 'react';\nimport styled from 'styled-components';\n\nconst Wrapper = styled.div`\n\t${({ imageUrl }) => `\n        width: 350px;\n        background-color: white;\n        border: 1px solid #e6e6e6;\n\n        .product-img {\n            width: 350px;\n            height: 350px;\n            background-image: url(${imageUrl});\n            background-repeat: no-repeat;\n            background-size: cover;\n            border-bottom: 1px solid #e6e6e6;\n        }\n\n        .product-info {\n            width: 100%;\n            display: flex;\n            flex-direction: column; \n            align-items: center;\n            justify-content: center;\n            padding-top: 10px;\n        }\n\n        .product-buy-now {\n            width: 100%;\n            height: 60px;\n            font-family: 'Arial';\n            color: white;\n            background: radial-gradient(circle, rgba(238,174,202,1) 0%, rgba(148,187,233,1) 100%);\n            font-size: 30px;\n            cursor: pointer;\n            display: flex;\n            align-items: center;\n            justify-content: center;\n            font-weight: bold;\n\n            &:hover {\n                background: linear-gradient(90deg, rgba(131,58,180,1) 0%, rgba(253,29,29,1) 50%, rgba(252,176,69,1) 100%);\n            }\n        }\n    `}\n`;\n\nconst ProductItem = (props) => {\n\tconst {\n\t\tproduct: { currency, name, price, url_image, sku },\n\t\tbuyNow,\n\t} = props;\n\treturn (\n\t\t<Wrapper imageUrl={url_image}>\n\t\t\t<div className='product-img' />\n\t\t\t<div className='product-info'>\n\t\t\t\t<div>{name}</div>\n\t\t\t\t<h3>\n\t\t\t\t\t{price} {currency}\n\t\t\t\t</h3>\n\t\t\t</div>\n\t\t\t<div className='product-buy-now' onClick={() => buyNow(sku)}>\n\t\t\t\tBuy now\n\t\t\t</div>\n\t\t</Wrapper>\n\t);\n};\n\nexport default ProductItem;\n","import React from 'react';\nimport styled from 'styled-components';\n\nconst Wrapper = styled.div`\n\tposition: relative;\n\tbackground-color: rgba(0, 0, 0, 0.45);\n\tz-index: 9000;\n\twidth: 100vw;\n\theight: 100vh;\n\tdisplay: flex;\n\tjustify-content: center;\n`;\n\nconst Content = styled.div`\n\tborder-radius: 3px;\n\tpadding: 12px;\n\tbackground-color: white;\n\tposition: absolute;\n\ttop: ${({ top }) => top || '50px'};\n\twidth: ${({ width }) => width || '600px'};\n\tmin-height: 250px;\n\n\t#header {\n\t\tdisplay: flex;\n\t\tjustify-content: space-between;\n\t\talign-items: center;\n\n\t\t#close-button {\n\t\t\tcursor: pointer;\n\t\t\t&:after {\n\t\t\t\tcontent: '✕';\n\t\t\t\tcolor: gray;\n\t\t\t}\n\t\t}\n\t}\n\n\t#content {\n\t\tpadding: 20px 12px;\n\t}\n`;\n\nconst Modal = (props) => {\n\tconst { show, title, width, top, height, onClose } = props;\n\n\treturn (\n\t\t<React.Fragment>\n\t\t\t{show && (\n\t\t\t\t<div style={{ position: 'absolute', top: 0, left: 0, bottom: 0, right: 0 }}>\n\t\t\t\t\t<Wrapper>\n\t\t\t\t\t\t<Content width={width} top={top}>\n\t\t\t\t\t\t\t<div id='header'>\n\t\t\t\t\t\t\t\t<div>{title}</div>\n\t\t\t\t\t\t\t\t<div id='close-button' onClick={onClose} />\n\t\t\t\t\t\t\t</div>\n\t\t\t\t\t\t\t<div>{props.children}</div>\n\t\t\t\t\t\t</Content>\n\t\t\t\t\t</Wrapper>\n\t\t\t\t</div>\n\t\t\t)}\n\t\t</React.Fragment>\n\t);\n};\n\nexport default Modal;\n","import React, { useState, useEffect } from 'react';\nimport styled from 'styled-components';\nimport ProductItem from 'components/ProductItem';\nimport Modal from 'components/Common/Modal';\nimport { fetchListProducts } from 'configs/Api';\n\nconst Wrapper = styled.div`\n\tdisplay: flex;\n\talign-items: center;\n\tjustify-content: space-between;\n\tpadding: 30px;\n`;\n\nconst ListProduct = () => {\n\tconst [products, setProducts] = useState([]);\n\tconst [showPopupByNow, setShowPopupBuyNow] = useState(false);\n\n\tuseEffect(() => {\n\t\tconst fetchProduct = async () => {\n\t\t\ttry {\n\t\t\t\tconst { data } = await fetchListProducts();\n\t\t\t\tsetProducts(data);\n\t\t\t} catch (error) {\n\t\t\t\tconsole.log(new Error(error));\n\t\t\t}\n\t\t};\n\t\tfetchProduct();\n\t}, []);\n\n\tfunction buyNow(sku) {\n\t\tsetShowPopupBuyNow(true);\n\t}\n\n\tfunction handleShowPopup() {\n\t\tsetShowPopupBuyNow((currentState) => !currentState);\n\t}\n\n\treturn (\n\t\t<Wrapper>\n\t\t\t{products.map((item) => (\n\t\t\t\t<ProductItem product={item} buyNow={buyNow} />\n\t\t\t))}\n\t\t\t<Modal show={showPopupByNow} onClose={handleShowPopup} />\n\t\t</Wrapper>\n\t);\n};\n\nexport default ListProduct;\n","import React from \"react\";\nimport { BrowserRouter as Router, Route, Switch } from \"react-router-dom\";\nimport { Elements } from \"@stripe/react-stripe-js\";\nimport { loadStripe } from \"@stripe/stripe-js\";\n\nimport { PayPalButton } from \"components\";\nimport { CheckoutSuccess, CheckoutFormHooks, ListPackage, ListProduct } from \"./containers\";\n\nconst stripePromise = loadStripe(process.env.REACT_APP_STRIPE_CLIENT_ID);\n\nfunction App() {\n    return (\n        <Router>\n            <Switch>\n                <Elements stripe={stripePromise}>\n                    <CheckoutFormHooks />\n                    <Route path=\"/\" exact component={ListPackage} />\n                    <Route path=\"/checkout-success\" exact component={CheckoutSuccess} />\n                </Elements>\n            </Switch>\n            <ListProduct />\n            <PayPalButton />\n        </Router>\n    );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport dotenv from 'dotenv';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\ndotenv.config();\n\nReactDOM.render(\n  <App />,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}